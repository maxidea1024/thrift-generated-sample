/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace MyService
{

  public partial class LoginResponse : TBase
  {
    private string _session_key;
    private bool _newbee;

    public string Session_key
    {
      get
      {
        return _session_key;
      }
      set
      {
        __isset.session_key = true;
        this._session_key = value;
      }
    }

    public bool Newbee
    {
      get
      {
        return _newbee;
      }
      set
      {
        __isset.newbee = true;
        this._newbee = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool session_key;
      public bool newbee;
    }

    public LoginResponse()
    {
      this._session_key = "1234";
      this.__isset.session_key = true;
      this._newbee = false;
      this.__isset.newbee = true;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Session_key = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Newbee = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("LoginResponse");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Session_key != null && __isset.session_key)
        {
          field.Name = "session_key";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Session_key, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.newbee)
        {
          field.Name = "newbee";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Newbee, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as LoginResponse;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.session_key == other.__isset.session_key) && ((!__isset.session_key) || (System.Object.Equals(Session_key, other.Session_key))))
        && ((__isset.newbee == other.__isset.newbee) && ((!__isset.newbee) || (System.Object.Equals(Newbee, other.Newbee))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.session_key)
          hashcode = (hashcode * 397) + Session_key.GetHashCode();
        if(__isset.newbee)
          hashcode = (hashcode * 397) + Newbee.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("LoginResponse(");
      bool __first = true;
      if (Session_key != null && __isset.session_key)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Session_key: ");
        sb.Append(Session_key);
      }
      if (__isset.newbee)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Newbee: ");
        sb.Append(Newbee);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
