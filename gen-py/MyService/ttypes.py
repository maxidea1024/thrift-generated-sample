#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ServicePlatformType(object):
    Google = 0
    Apple = 1
    Facebook = 2
    Twitter = 3
    OneStore = 4

    _VALUES_TO_NAMES = {
        0: "Google",
        1: "Apple",
        2: "Facebook",
        3: "Twitter",
        4: "OneStore",
    }

    _NAMES_TO_VALUES = {
        "Google": 0,
        "Apple": 1,
        "Facebook": 2,
        "Twitter": 3,
        "OneStore": 4,
    }


class LoginRequest(object):
    """
    Attributes:
     - id: 사용자 계정 ID
     - password: 사용자 계정 비밀번호

    """


    def __init__(self, id="guest", password="",):
        self.id = id
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginRequest')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginResponse(object):
    """
    Attributes:
     - session_key: 세션키
     - newbee: 신규 가입자인지 여부

    """


    def __init__(self, session_key="1234", newbee=False,):
        self.session_key = session_key
        self.newbee = newbee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.session_key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.newbee = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginResponse')
        if self.session_key is not None:
            oprot.writeFieldBegin('session_key', TType.STRING, 1)
            oprot.writeString(self.session_key.encode('utf-8') if sys.version_info[0] == 2 else self.session_key)
            oprot.writeFieldEnd()
        if self.newbee is not None:
            oprot.writeFieldBegin('newbee', TType.BOOL, 2)
            oprot.writeBool(self.newbee)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LoginRequest)
LoginRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', "guest", ),  # 1
    (2, TType.STRING, 'password', 'UTF8', "", ),  # 2
)
all_structs.append(LoginResponse)
LoginResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'session_key', 'UTF8', "1234", ),  # 1
    (2, TType.BOOL, 'newbee', None, False, ),  # 2
)
fix_spec(all_structs)
del all_structs
