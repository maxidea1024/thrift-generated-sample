/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Auth_H
#define Auth_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "sample_types.h"

namespace MyService {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AuthIf {
 public:
  virtual ~AuthIf() {}

  /**
   * API 서버에게 로그인을 요청합니다.
   * 
   * @param request
   */
  virtual void Login(LoginResponse& _return, const LoginRequest& request) = 0;
};

class AuthIfFactory {
 public:
  typedef AuthIf Handler;

  virtual ~AuthIfFactory() {}

  virtual AuthIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AuthIf* /* handler */) = 0;
};

class AuthIfSingletonFactory : virtual public AuthIfFactory {
 public:
  AuthIfSingletonFactory(const ::std::shared_ptr<AuthIf>& iface) : iface_(iface) {}
  virtual ~AuthIfSingletonFactory() {}

  virtual AuthIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AuthIf* /* handler */) {}

 protected:
  ::std::shared_ptr<AuthIf> iface_;
};

class AuthNull : virtual public AuthIf {
 public:
  virtual ~AuthNull() {}
  void Login(LoginResponse& /* _return */, const LoginRequest& /* request */) {
    return;
  }
};

typedef struct _Auth_Login_args__isset {
  _Auth_Login_args__isset() : request(false) {}
  bool request :1;
} _Auth_Login_args__isset;

class Auth_Login_args {
 public:

  Auth_Login_args(const Auth_Login_args&);
  Auth_Login_args& operator=(const Auth_Login_args&);
  Auth_Login_args() {
  }

  virtual ~Auth_Login_args() noexcept;
  LoginRequest request;

  _Auth_Login_args__isset __isset;

  void __set_request(const LoginRequest& val);

  bool operator == (const Auth_Login_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Auth_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Auth_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Auth_Login_pargs {
 public:


  virtual ~Auth_Login_pargs() noexcept;
  const LoginRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Auth_Login_result__isset {
  _Auth_Login_result__isset() : success(false) {}
  bool success :1;
} _Auth_Login_result__isset;

class Auth_Login_result {
 public:

  Auth_Login_result(const Auth_Login_result&);
  Auth_Login_result& operator=(const Auth_Login_result&);
  Auth_Login_result() {
  }

  virtual ~Auth_Login_result() noexcept;
  LoginResponse success;

  _Auth_Login_result__isset __isset;

  void __set_success(const LoginResponse& val);

  bool operator == (const Auth_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Auth_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Auth_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Auth_Login_presult__isset {
  _Auth_Login_presult__isset() : success(false) {}
  bool success :1;
} _Auth_Login_presult__isset;

class Auth_Login_presult {
 public:


  virtual ~Auth_Login_presult() noexcept;
  LoginResponse* success;

  _Auth_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AuthClient : virtual public AuthIf {
 public:
  AuthClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Login(LoginResponse& _return, const LoginRequest& request);
  void send_Login(const LoginRequest& request);
  void recv_Login(LoginResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AuthProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AuthIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AuthProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthProcessor(::std::shared_ptr<AuthIf> iface) :
    iface_(iface) {
    processMap_["Login"] = &AuthProcessor::process_Login;
  }

  virtual ~AuthProcessor() {}
};

class AuthProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthProcessorFactory(const ::std::shared_ptr< AuthIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< AuthIfFactory > handlerFactory_;
};

class AuthMultiface : virtual public AuthIf {
 public:
  AuthMultiface(std::vector<std::shared_ptr<AuthIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AuthMultiface() {}
 protected:
  std::vector<std::shared_ptr<AuthIf> > ifaces_;
  AuthMultiface() {}
  void add(::std::shared_ptr<AuthIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Login(LoginResponse& _return, const LoginRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(_return, request);
    }
    ifaces_[i]->Login(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AuthConcurrentClient : virtual public AuthIf {
 public:
  AuthConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AuthConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Login(LoginResponse& _return, const LoginRequest& request);
  int32_t send_Login(const LoginRequest& request);
  void recv_Login(LoginResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
