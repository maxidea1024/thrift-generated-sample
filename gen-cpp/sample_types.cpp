/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "sample_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace MyService {

int _kServicePlatformTypeValues[] = {
  ServicePlatformType::Google,
  ServicePlatformType::Apple,
  ServicePlatformType::Facebook,
  ServicePlatformType::Twitter,
  ServicePlatformType::OneStore
};
const char* _kServicePlatformTypeNames[] = {
  "Google",
  "Apple",
  "Facebook",
  "Twitter",
  "OneStore"
};
const std::map<int, const char*> _ServicePlatformType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kServicePlatformTypeValues, _kServicePlatformTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ServicePlatformType::type& val) {
  std::map<int, const char*>::const_iterator it = _ServicePlatformType_VALUES_TO_NAMES.find(val);
  if (it != _ServicePlatformType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ServicePlatformType::type& val) {
  std::map<int, const char*>::const_iterator it = _ServicePlatformType_VALUES_TO_NAMES.find(val);
  if (it != _ServicePlatformType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


LoginRequest::~LoginRequest() noexcept {
}


void LoginRequest::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void LoginRequest::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}
std::ostream& operator<<(std::ostream& out, const LoginRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginRequest");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.password) {
    xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->password);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginRequest &a, LoginRequest &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.password, b.password);
  swap(a.__isset, b.__isset);
}

LoginRequest::LoginRequest(const LoginRequest& other0) {
  id = other0.id;
  password = other0.password;
  __isset = other0.__isset;
}
LoginRequest& LoginRequest::operator=(const LoginRequest& other1) {
  id = other1.id;
  password = other1.password;
  __isset = other1.__isset;
  return *this;
}
void LoginRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginRequest(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "password="; (__isset.password ? (out << to_string(password)) : (out << "<null>"));
  out << ")";
}


LoginResponse::~LoginResponse() noexcept {
}


void LoginResponse::__set_session_key(const std::string& val) {
  this->session_key = val;
__isset.session_key = true;
}

void LoginResponse::__set_newbee(const bool val) {
  this->newbee = val;
__isset.newbee = true;
}
std::ostream& operator<<(std::ostream& out, const LoginResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key);
          this->__isset.session_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->newbee);
          this->__isset.newbee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginResponse");

  if (this->__isset.session_key) {
    xfer += oprot->writeFieldBegin("session_key", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->session_key);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newbee) {
    xfer += oprot->writeFieldBegin("newbee", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->newbee);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginResponse &a, LoginResponse &b) {
  using ::std::swap;
  swap(a.session_key, b.session_key);
  swap(a.newbee, b.newbee);
  swap(a.__isset, b.__isset);
}

LoginResponse::LoginResponse(const LoginResponse& other2) {
  session_key = other2.session_key;
  newbee = other2.newbee;
  __isset = other2.__isset;
}
LoginResponse& LoginResponse::operator=(const LoginResponse& other3) {
  session_key = other3.session_key;
  newbee = other3.newbee;
  __isset = other3.__isset;
  return *this;
}
void LoginResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginResponse(";
  out << "session_key="; (__isset.session_key ? (out << to_string(session_key)) : (out << "<null>"));
  out << ", " << "newbee="; (__isset.newbee ? (out << to_string(newbee)) : (out << "<null>"));
  out << ")";
}

} // namespace
