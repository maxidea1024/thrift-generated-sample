#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

package MyService::ServicePlatformType;
use constant Google => 0;
use constant Apple => 1;
use constant Facebook => 2;
use constant Twitter => 3;
use constant OneStore => 4;

package MyService::LoginRequest;
use base qw(Class::Accessor);
MyService::LoginRequest->mk_accessors( qw( id password ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = "guest";
  $self->{password} = "";
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{password}) {
      $self->{password} = $vals->{password};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{password});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginRequest');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{password}) {
    $xfer += $output->writeFieldBegin('password', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{password});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MyService::LoginResponse;
use base qw(Class::Accessor);
MyService::LoginResponse->mk_accessors( qw( session_key newbee ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{session_key} = "1234";
  $self->{newbee} = 0;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{session_key}) {
      $self->{session_key} = $vals->{session_key};
    }
    if (defined $vals->{newbee}) {
      $self->{newbee} = $vals->{newbee};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{session_key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{newbee});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginResponse');
  if (defined $self->{session_key}) {
    $xfer += $output->writeFieldBegin('session_key', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{session_key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{newbee}) {
    $xfer += $output->writeFieldBegin('newbee', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{newbee});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
